Рефакторинг существующего кода.
Отрефакторить и оформить в виде библиотеки на Гитхабе следующий код: https://gist.github.com/Melevir/5754a1b553eb11839238e43734d0eb79

2018.08.02

Даниил Титков 14:15
Здравствуйте, Даниил! я накидал свои мысли, почему так сделал, скорректирую.

- лучше каждую домашку (если явно не подразумевается иное) делать отдельными репозиторием
  Ответ: хорошо, скорректирую.
- dclnt.py - не самое лучшее название для библиотеки)
  Ответ: Даниил, я воспринимаю выражение "Рефакторинг существующего кода", как "Рефакторинг используемого уже кем-то / чем-то кода", поэтому изменений в названиях имен функций, имен передаваемых переменных (например, _path в get_trees) или имен файлов никогда не делаю (рефакторинг процесс изменения внутренней структуры). Если я поменяю что-то не по этой логике, то это может привести к неработоспособности программ, которые уже используют dclnt, ведь "import dclnt" уже не сработает, как и "get_trees(_path=...)"), что вынудит к необоснованному привлечению других программистов к переписыванию программ, использующих dclnt (конечно кому-то из них заплатят за переделку своей части, эт хорошо, а кому-то нет, а я буду виноват в их привлечении, сами понимаете). Если "Рефакторинг существующего кода" это "оформить в виде своей библиотеки" (где ключевое слово "своей"), то я так и поступлю. Хорошо, скорректирую, но для последующих курсов лучше в этом задании так и указать, что код должен претерпеть так же реинжениринг.
- нет ридми с примерами использования, описанием установки и т.д. в задании же надо было оформить это как библиотеку) То есть как будто бы ею будут пользоваться другие люди.
  Ответ: хорошо, скорректирую, с README всегда сложно.
- Дебажные принты хорошо бы удалить, а информационные заменить логгированием.
  Ответ: хорошо, скорректирую.
- функция get_trees очень страшная) во-первых, куча вложенности, а во-вторых у нее формат результата зависит от аргументов. Надо бы что-то с этим сделать. Ну и если какая-то ерунда не нужна, то её можно удалять)
  Ответ: опять же, я отталкивался от понимания (возможно субъективного) фразы "Рефакторинг существующего кода",
  если кто-то / что-то использует get_trees. Но мы договорились, хорошо, скорректирую
- if top_size is None: top_size = 10 - что-то странное. 10 можно было передать дефолтным значением. Это изменяемые объекты не стоит передавать дефолтными значениями, если с ними что-то внутри происходит)
  Ответ: почему, я всегда использую объявление дефолтных значений через v=None, с последующим, например, "if v is None: v = 10", я так борюсь за потенциальную чистоту функций, чтоб никто после меня, рефакторя, неспециально не натворил дел. Например,
    def get_result(from_string, top=2, result=[]):
        a = result
        a.append(from_string[:top])
        return a


    # между последующими вывзовами очень много логики
    get_result("123", top=1)  # выведет ['1']
    # очень много логики
    get_result("123") # ожидаем, что выведет ['1'], а выведет ['1', '12']

    # при очень большом цикличном потоке это ожидание может быть негативным
    # поэтому
    # 1) либо не делать дефолтных значений вообще
    # 2) либо использовать копии "a = result.copy()", что иногда дорого
    # 3) либо делать так (конечно, в документации указав на значение по-умолчанию)

    def get_result(from_string, top=None, result=None):
        if top is None:
            top = 2
        if result is None:
            result = []
        a = result
        a.append(from_string[:top])
        return a
  Ответ: разрешите оставить так? Если нет, то конечно переделаю.

- кроме 'VB' в нлтка есть еще и другие теги для глаголов)
  Ответ: заложенная логика в get_verbs_from_function_name, которая использует is_verb, опирающийся на метку "VB", таким образом будет изменена. Это изменение именно авторской логики. Но я Вас понял, хорошо, скорректирую.
- нету файла с указанием зависимостей
  Ответ: requirements.txt. хорошо, скорректирую.
- в одном файле хранится и бизнес-логика, и хэлперы типа "уплощения" списка. Может быть, в дидактических целях их стоит расселить на разные файлы, хоть кода в целом и не много)
  Ответ: хорошо, скорректирую.
- вообще после рефакторинга стало лучше, но еще есть над чем поработать)
  Ответ: хорошо, спасибо.